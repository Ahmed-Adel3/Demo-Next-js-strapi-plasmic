// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nCYdrPreWy1Y9vibrND8zs
// Component: gwli7mWhiOr5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: oBF7spngyz80/component
import { StrapiCollection } from "@plasmicpkgs/plasmic-strapi"; // plasmic-import: 3PiAu_DqaPA/codeComponent
import { StrapiField } from "@plasmicpkgs/plasmic-strapi"; // plasmic-import: Yal_C-reFIU/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: s_X35kxNyfle/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_poc_project.module.css"; // plasmic-import: nCYdrPreWy1Y9vibrND8zs/projectcss
import sty from "./PlasmicArticles.module.css"; // plasmic-import: gwli7mWhiOr5/css

createPlasmicElementProxy;

export type PlasmicArticles__VariantMembers = {};
export type PlasmicArticles__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticles__VariantsArgs;
export const PlasmicArticles__VariantProps = new Array<VariantPropType>();

export type PlasmicArticles__ArgsType = {
  id?: string;
  id2?: string;
};
type ArgPropType = keyof PlasmicArticles__ArgsType;
export const PlasmicArticles__ArgProps = new Array<ArgPropType>("id", "id2");

export type PlasmicArticles__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  strapiCollection?: p.Flex<typeof StrapiCollection>;
  freeBox?: p.Flex<"div">;
  strapiField?: p.Flex<typeof StrapiField>;
};

export interface DefaultArticlesProps {}

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticles__RenderFunc(props: {
  variants: PlasmicArticles__VariantsArgs;
  args: PlasmicArticles__ArgsType;
  overrides: PlasmicArticles__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          id: (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Untitled page"}
                    </h1>
                  </section>
                  <StrapiCollection
                    data-plasmic-name={"strapiCollection"}
                    data-plasmic-override={overrides.strapiCollection}
                    className={classNames(
                      "__wab_instance",
                      sty.strapiCollection
                    )}
                    filterField={undefined}
                    filterParameter={"$eq"}
                    filterValue={(() => {
                      try {
                        return $ctx.params.slug;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    limit={1}
                    name={"Articles"}
                    noAutoRepeat={false}
                    noLayout={false}
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          data-plasmic-name={"freeBox"}
                          data-plasmic-override={overrides.freeBox}
                          className={classNames(projectcss.all, sty.freeBox)}
                        >
                          <StrapiField
                            data-plasmic-name={"strapiField"}
                            data-plasmic-override={overrides.strapiField}
                            className={classNames(
                              "__wab_instance",
                              sty.strapiField
                            )}
                            path={"Title"}
                          />
                        </div>
                      )}
                    </ph.DataCtxReader>
                  </StrapiCollection>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "strapiCollection",
    "freeBox",
    "strapiField"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "strapiCollection",
    "freeBox",
    "strapiField"
  ],
  section: ["section", "h1"],
  h1: ["h1"],
  strapiCollection: ["strapiCollection", "freeBox", "strapiField"],
  freeBox: ["freeBox", "strapiField"],
  strapiField: ["strapiField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  strapiCollection: typeof StrapiCollection;
  freeBox: "div";
  strapiField: typeof StrapiField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticles__VariantsArgs;
    args?: PlasmicArticles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticles__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticles__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticles__ArgProps,
          internalVariantPropNames: PlasmicArticles__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticles";
  } else {
    func.displayName = `PlasmicArticles.${nodeName}`;
  }
  return func;
}

export const PlasmicArticles = Object.assign(
  // Top-level PlasmicArticles renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    strapiCollection: makeNodeComponent("strapiCollection"),
    freeBox: makeNodeComponent("freeBox"),
    strapiField: makeNodeComponent("strapiField"),

    // Metadata about props expected for PlasmicArticles
    internalVariantProps: PlasmicArticles__VariantProps,
    internalArgProps: PlasmicArticles__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicArticles;
/* prettier-ignore-end */
