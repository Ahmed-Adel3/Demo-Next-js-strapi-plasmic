// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nCYdrPreWy1Y9vibrND8zs
// Component: gwli7mWhiOr5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: oBF7spngyz80/component
import { StrapiCollection } from "@plasmicpkgs/plasmic-strapi"; // plasmic-import: 3PiAu_DqaPA/codeComponent
import { StrapiField } from "@plasmicpkgs/plasmic-strapi"; // plasmic-import: Yal_C-reFIU/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: s_X35kxNyfle/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_poc_project.module.css"; // plasmic-import: nCYdrPreWy1Y9vibrND8zs/projectcss
import sty from "./PlasmicArticles.module.css"; // plasmic-import: gwli7mWhiOr5/css

createPlasmicElementProxy;

export type PlasmicArticles__VariantMembers = {};
export type PlasmicArticles__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticles__VariantsArgs;
export const PlasmicArticles__VariantProps = new Array<VariantPropType>();

export type PlasmicArticles__ArgsType = {};
type ArgPropType = keyof PlasmicArticles__ArgsType;
export const PlasmicArticles__ArgProps = new Array<ArgPropType>();

export type PlasmicArticles__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  strapiCollection?: p.Flex<typeof StrapiCollection>;
  section?: p.Flex<"section">;
};

export interface DefaultArticlesProps {}

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticles__RenderFunc(props: {
  variants: PlasmicArticles__VariantsArgs;
  args: PlasmicArticles__ArgsType;
  overrides: PlasmicArticles__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance")}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <StrapiCollection
                  data-plasmic-name={"strapiCollection"}
                  data-plasmic-override={overrides.strapiCollection}
                  className={classNames("__wab_instance", sty.strapiCollection)}
                  filterField={"slug"}
                  filterParameter={"$eq"}
                  filterValue={(() => {
                    try {
                      return $ctx.params.slug;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "2d1ad689-1f69-4dcc-b678-7d566a15f10c";
                      }
                      throw e;
                    }
                  })()}
                  limit={1}
                  name={"Articles"}
                  noAutoRepeat={false}
                  noLayout={false}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iglbS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tKAqT
                          )}
                        >
                          <StrapiField
                            className={classNames(
                              "__wab_instance",
                              sty.strapiField__msMu3
                            )}
                            path={"Title"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3M6Lg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uQaS6
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Created in: "}
                              </span>
                            </React.Fragment>
                          </div>
                          <StrapiField
                            className={classNames(
                              "__wab_instance",
                              sty.strapiField__nfP3E
                            )}
                            path={"createdAt"}
                          />

                          <section
                            data-plasmic-name={"section"}
                            data-plasmic-override={overrides.section}
                            className={classNames(projectcss.all, sty.section)}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wDpGm
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Created by:"}
                              </span>
                            </React.Fragment>
                          </div>
                          <StrapiField
                            className={classNames(
                              "__wab_instance",
                              sty.strapiField__vEpL7
                            )}
                            path={"Author"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k4S7W
                          )}
                        >
                          <StrapiField
                            className={classNames(
                              "__wab_instance",
                              sty.strapiField__i2Rf8
                            )}
                            path={"Cover"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o6WaZ
                          )}
                        >
                          <StrapiField
                            className={classNames(
                              "__wab_instance",
                              sty.strapiField__nuZbw
                            )}
                            path={"Body"}
                          />
                        </div>
                      </div>
                    )}
                  </ph.DataCtxReader>
                </StrapiCollection>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "strapiCollection", "section"],
  pageLayout: ["pageLayout", "strapiCollection", "section"],
  strapiCollection: ["strapiCollection", "section"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  strapiCollection: typeof StrapiCollection;
  section: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticles__VariantsArgs;
    args?: PlasmicArticles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticles__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticles__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticles__ArgProps,
          internalVariantPropNames: PlasmicArticles__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticles";
  } else {
    func.displayName = `PlasmicArticles.${nodeName}`;
  }
  return func;
}

export const PlasmicArticles = Object.assign(
  // Top-level PlasmicArticles renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    strapiCollection: makeNodeComponent("strapiCollection"),
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicArticles
    internalVariantProps: PlasmicArticles__VariantProps,
    internalArgProps: PlasmicArticles__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicArticles;
/* prettier-ignore-end */
